var w = this, d = w.document, a = "audio", v = "video", s = "script", PlatformDetector = function() {
    function t() {
        this.regex = {
            platform: {
                playstation: new RegExp("^Mozilla/[0-9].[0-9]\\s.(PlayStation [3-5]).*\\sSCEE/[1-9].[0-9]\\sNuanti/[1-9].[0-9]"),
                mobile: new RegExp("Mobile|Android|Tab|Tablet|GT|SM-(T|P)|Silk-Accelerated", "i"),
                tablet: new RegExp("Tab|Tablet|iPad|SM-(T|P)|GT|Silk-Accelerated", "i"),
                desktop: new RegExp("(?:(?!Mobile|Android|Tab|Tablet|GT|SM-(T|P)|Silk-Accelerated).)", "i")
            },
            os: {
                android: new RegExp("Linux.*Android"),
                ios: new RegExp("like\\sMac\\sOS\\sX"),
                mac: new RegExp("Intel\\sMac\\sOS\\sX"),
                windows: new RegExp("Windows\\sNT")
            },
            browser: {
                ie: new RegExp("msie|trident", "i"),
                edge: new RegExp("Edge"),
                chrome: new RegExp("Chrome"),
                firefox: new RegExp("Firefox"),
                safari: new RegExp("Safari")
            }
        }, this.canInit = !1, w.navigator && w.navigator.userAgent && w.RegExp && "function" == typeof w.RegExp ? this.canInit = !0 : this.throwErr();
    }
    return t.prototype.detectDevice = function() {
        return {
            platform: this.detect("platform"),
            os: this.detect("os"),
            browser: this.detect("browser")
        };
    }, t.prototype.detect = function(t) {
        if (this.canInit) {
            var e = this.regex[t], i = void 0;
            for (i in e) if (e[i].test(w.navigator.userAgent)) return i;
        } else this.throwErr();
    }, t.prototype.throwErr = function() {
        if (w.Error && "function" == typeof w.Error) throw new Error("This browser doesn't supprot platform detection.");
    }, t;
}(), Galactic = function() {
    function t() {
        this.setup();
    }
    return t.prototype.setup = function() {
        var e = this;
        this.audioElementEvents = {
            abort: function(t) {
                e.checkError(t);
            },
            stalled: function(t) {
                e.checkError(t);
            },
            suspend: function(t) {
                e.bufferProgress <= 98 && e.checkError(t);
            },
            error: function(t) {
                e.checkError(t), e.options.video && e.isUsingHLSPolyfill && ((t = t.currentTarget.error).code === t.MEDIA_ERR_DECODE && e.hlsVideoTagErrorHandler());
            },
            emptied: function(t) {
                e.audioTrackPlaying = void 0;
            },
            waiting: function(t) {
                e.audioTrackPlaying = void 0, e.checkError(t), e.hasBuffer() && e.onBufferChange(t), 
                e.dispatchEvent("wait", {
                    status: e.audioTrackPlaying
                });
            },
            loadedmetadata: function(t) {
                e.metadata = !0;
            },
            loadstart: function(t) {
                e.audioTrackPlaying = void 0, e.dispatchEvent("wait", {
                    status: e.audioTrackPlaying
                }), e.hasBuffer() && e.onBufferChange(t);
            },
            durationchange: function(t) {
                e.isValid() && e.onDurationChange(t), e.lastPosition && (e.setPosition(e.lastPosition), 
                e.lastPosition = void 0), e.duration = t.target.duration;
            },
            timeupdate: function(t) {
                e.playState = !0, e.isValid() && (e.onDurationChange(t), e.audioTrackPlaying = !0), 
                e.hasBuffer() && e.onBufferChange(t), e.isReloading && (e.isReloading = e.error = !1), 
                100 === e.bufferProgress && e.clearWaiters();
            },
            canplay: function(t) {
                e.forcePause && !e.audioElement.paused && e.pause(void 0, !0), e.dispatchEvent("readyToPlay", {
                    track: e.currentMediaItem,
                    src: e.currentSrc,
                    progress: e.progress
                }), e.options.playOnLoad && e.play();
            },
            playing: function(t) {
                e.forcePause && !e.audioElement.paused && e.pause(void 0, !0), e.audioTrackPlaying = !0, 
                e.isValid() && e.dispatchEvent("play", {
                    status: e.audioTrackPlaying
                }), e.hasBuffer() && e.onBufferChange(t);
            },
            pause: function(t) {
                e.forcePause = !1, e.isPaused = !0, e.audioTrackPlaying = !1, e.isValid() && e.dispatchEvent("pause", {
                    status: e.audioTrackPlaying
                });
            },
            ended: function(t) {
                e.isValid() && e.dispatchEvent("end", {
                    progress: e.progress
                });
            },
            progress: function(t) {
                e.hasBuffer() && e.onBufferChange(t);
            },
            ratechange: function(t) {
                e.isValid() && e.dispatchEvent("rateChange");
            },
            volumechange: function(t) {
                e.isValid() && e.dispatchEvent("volumeChange");
            },
            seeking: function(t) {
                e.pause();
            },
            seeked: function(t) {
                e.options.playOnLoad && e.play();
            }
        }, this.options = {
            html5: !0,
            reloadOnInit: 1e4,
            reloadOnError: 5e3,
            reloadCount: 5,
            volume: 1,
            fadeIn: !1,
            hls: !1,
            playOnLoad: !0
        }, this.emptyVideoFileBase64 = "data:application/x-mpegURL;base64,UklGRjIAAABXQVZFZm10IBIAAAABAAEAQB8AAEAfAAABAAgAAABmYWN0BAAAAAAAAABkYXRhAAAAAA==", 
        this.emptyWaveFileBase64 = "data:audio/wave;base64,UklGRjIAAABXQVZFZm10IBIAAAABAAEAQB8AAEAfAAABAAgAAABmYWN0BAAAAAAAAABkYXRhAAAAAA==", 
        this.mimeRegx = new RegExp(/\.m4a|mp4|mpeg4|aac|flv|mov|m4v|f4v|.m4b|mp4v|3gp|3g2|mp4|m3u8/), 
        this.eventMap = {}, this.list = this.playNextList = this.shuffleList = [], 
        this.currentMediaItem = {}, this.online = !0, this.bufferProgress = this.progress = this.lastBufferProgress = this.position = this.remainingTime = this.currentIndex = this.shuffleIndex = this.duration = 0, 
        this.audioElement = this.errorTimeout = this.lastPosition = this.error = this.metadata = this.isRepeating = this.isShuffling = this.isPaused = this.isReloading = this.interval = this.onlinecbreload = this.playState = this.forceDurationChangeForAudioAd = this.playPromise = void 0, 
        this.device = new PlatformDetector().detectDevice(), this.windows = "ie" === this.device.browser, 
        this.playstation = "playstation" === this.device.platform, this.loadEmpty = function() {
            e.forcePause = !1, e.load(!1);
        }, this.windows || this.playstation || (w.addEventListener("offline", this.offlinecb, !1), 
        w.addEventListener("online", this.onlinecb, !1));
    }, t.prototype.appendHLSEvents = function() {
        var i = this;
        this.hls.on(w.Hls.Events.MANIFEST_PARSED, function() {
            i.options.playOnLoad && i.play();
        }), this.hls.on(w.Hls.Events.ERROR, function(t, e) {
            if (e.fatal) switch (e.type) {
              case w.Hls.ErrorTypes.NETWORK_ERROR:
                i.hls.startLoad();
                break;

              case w.Hls.ErrorTypes.MEDIA_ERROR:
                i.hlsjsErrorHandler();
                break;

              default:
                i.destoryHLS();
            }
        });
    }, t.prototype.init = function(t) {
        return this.setOptions(t), this.createMedia(), this;
    }, t.prototype.isOnline = function() {
        var t = new XMLHttpRequest();
        t.open("HEAD", "//".concat(w.location.hostname, "/?rand=").concat(w.Math.floor(65536 * (1 + w.Math.random()))), !1);
        try {
            return t.send(), 200 <= t.status && (t.status < 300 || 304 === t.status);
        } catch (t) {
            return !1;
        }
    }, t.prototype.waitUntilOnline = function() {
        var t = this;
        return this.windows || this.playstation ? this.interval || (this.interval = w.setInterval(function() {
            t.online = t.isOnline(), t.online && t.reload(0);
        }, 2e3)) : this.onlinecbreload = !0, this;
    }, t.prototype.onlinecb = function() {
        this.online = !0, this.onlinecbreload && this.reload(0);
    }, t.prototype.offlinecb = function() {
        this.online = !1;
    }, t.prototype.onBufferChange = function(t) {
        try {
            var e = t.target.duration, i = t.target.buffered, s = t.target.currentTime, o = 0, n = i.length;
            if (this.lastBufferProgress = this.bufferProgress, 0 < e && 0 < n) {
                for (;o < n; o++) if (i.start(n - 1 - o) < s) {
                    this.bufferProgress = w.Math.ceil(i.end(n - 1 - o) / e * 100);
                    break;
                }
            } else this.bufferProgress = void 0;
            this.isBufferValid() && this.dispatchEvent("bufferChange", {
                bufferProgress: this.bufferProgress
            });
        } catch (t) {}
    }, t.prototype.onDurationChange = function(t) {
        var e = t.target.duration ? 1e3 * t.target.duration : 0, t = t.target.currentTime ? 1e3 * t.target.currentTime : 0;
        this.setTimeValues(t / e * 100, e - t, t);
    }, t.prototype.setTimeValues = function(t, e, i) {
        this.progress = t, this.remainingTime = e, this.position = i, 0 < this.position && this.dispatchEvent("durationChange", {
            progress: this.progress,
            remainingTime: this.remainingTime,
            position: this.position,
            duration: this.audioElement.duration,
            status: this.audioTrackPlaying
        });
    }, t.prototype.setPosition = function(t) {
        if (this.playState) try {
            this.audioElement.currentTime = Number(t) / 1e3;
        } catch (t) {}
        return this;
    }, t.prototype.reload = function(t, e) {
        var i = this;
        1e3 < this.position && (this.lastPosition = this.position), this.errorTimeout || (this.errorTimeout = w.setTimeout(function() {
            i.online && !i.audioTrackPlaying && i.error ? 2 <= i.audioElement.readyState && 2 === i.audioElement.networkState ? (i.isReloading = !0, 
            i.clearWaiters().play(!0)) : i.load(i.currentSrc, !0) : (i.error = !1, 
            i.isReloading = !1, i.clearWaiters());
        }, t));
    }, t.prototype.setVolume = function(t) {
        try {
            return 1 < t ? void 0 : (this.audioElement.volume = t, this.dispatchEvent("volumeChange", {
                volume: this.audioElement.volume
            }), this);
        } catch (t) {}
    }, t.prototype.getVolume = function() {
        return this.audioElement.volume;
    }, t.prototype.loadAudio = function() {
        return this.options.video && this.isUsingHLSPolyfill ? (this.createNewHlsContext(), 
        this.hls.loadSource(this.currentSrc)) : this.audioElement.load(), this;
    }, t.prototype.load = function(t, e) {
        return this.flush(!0), e && this.loadAudio(), t ? this.setSrc(t) : this.setSrc(this.options.video ? this.emptyVideoFileBase64 : this.emptyWaveFileBase64), 
        this.setAttribute("src", this.currentSrc), this.loadAudio(), this;
    }, t.prototype.fadeIn = function(e, i, s, o) {
        var n, r, a = this, d = (i = Math.round(i)) - e, h = null, l = (this.setVolume(0), 
        function(t) {
            t = t || new Date().getTime(), r = (n = t - (h = null === h ? t : h)) / s, 
            a.setVolume(e + d * r), n < s && a.getVolume() < i ? u = w.requestAnimationFrame(l) : (w.cancelAnimationFrame(u), 
            o && o(), l = d = h = e = u = null);
        }), u = w.requestAnimationFrame(l);
    }, t.prototype.play = function() {
        this.isPaused = !1;
        try {
            this.checkFadeIn(), this.audioElement.play().catch(function(t) {});
        } catch (t) {}
        return this;
    }, t.prototype.checkFadeIn = function() {
        this.options.fadeIn && this.fadeIn(0, .9, 5e3);
    }, t.prototype.pause = function(t, e) {
        if (t && (this.forcePause = !0), this.audioTrackPlaying || e) try {
            this.audioElement.pause();
        } catch (t) {}
        return this;
    }, t.prototype.stop = function(t) {
        return this.pause().flush(!0).dispatchEvent("durationChange", {
            progress: 0,
            remainingTime: 0,
            position: 0
        }), this.lastPosition = void 0, "function" == typeof t && t(), this;
    }, t.prototype.next = function(t, e) {
        return this[t] = this[t] === this.list.length - 1 ? 0 : ++this[t], this.currentMediaItem = this.list[this[t]], 
        "function" == typeof e && e({
            track: this.currentMediaItem
        }), this;
    }, t.prototype.previous = function(t, e) {
        return this[t] = this[t] <= 0 ? this.list.length - 1 : --this[t], this.currentMediaItem = this.list[this[t]], 
        "function" == typeof e && e({
            track: this.currentMediaItem
        }), this;
    }, t.prototype.repeat = function(t) {
        return this.isRepeating || this.toggle("repeat"), this.currentMediaItem = this.list[this.currentIndex], 
        "function" == typeof t && t({
            track: this.currentMediaItem
        }), this.dispatchEvent("repeatStatusChange", {
            repeat: this.isRepeating,
            track: this.currentMediaItem
        }), this;
    }, t.prototype.createShuffleList = function(t) {
        for (var e, i, s = t.length; 0 !== s; ) i = Math.floor(Math.random() * s), 
        e = t[--s], t[s] = t[i], t[i] = e;
        return t;
    }, t.prototype.shuffle = function(t) {
        return this.isShuffling || this.toggle("shuffle"), this.shuffleList = 0 === this.shuffleIndex ? this.createShuffleList(this.list) : this.shuffleList, 
        "function" == typeof t && (this.currentMediaItem = this.shuffleList[this.shuffleIndex], 
        t({
            track: this.currentMediaItem,
            list: this.shuffleList
        })), this.dispatchEvent("shuffleStatusChange", {
            shuffle: this.isShuffling,
            track: this.currentMediaItem
        }), this;
    }, t.prototype.addToPlaylist = function(t, e, i) {
        var s;
        return "string" == typeof e ? t.constructor === Array ? this[e] = s = 0 < t.length ? t : this[e] : (this[e].push(t), 
        s = this[e]) : t.constructor === Array ? this.list = this.shuffleList = s = 0 < t.length ? t : this.list : (this.list.push(t), 
        this.shuffleList = s = this.list), "function" == typeof i && i({
            list: s
        }), this.dispatchEvent("playlistChange", {
            playlist: this.list,
            shuffleList: this.shuffleList
        }), this;
    }, t.prototype.clearPlaylist = function(t, e) {
        return this[t] = [], "function" == typeof e && e(), this.dispatchEvent("playlistChange", ((e = {})[t] = this[t], 
        e)), this;
    }, t.prototype.setNextPlayingListItem = function(t) {
        return t.constructor === Array ? this.playNextList = this.playNextList.concat(t) : this.playNextList.push(t), 
        this;
    }, t.prototype.getNextPlayingListItem = function() {
        return this.playNextList[this.playNextList.length - 1];
    }, t.prototype.removeNextPlayingListItem = function() {
        return this.playNextList.splice(this.playNextList.length - 1, 1), this;
    }, t.prototype.hasNextPlayingListItem = function() {
        return 0 < this.playNextList.length;
    }, t.prototype.applyNextAction = function(e) {
        var i, s, o = this;
        return this.hasNextPlayingListItem() ? (i = function(t) {
            o.removeNextPlayingListItem(), o.currentMediaItem = t, e({
                track: o.currentMediaItem
            });
        }, s = this.getNextPlayingListItem(), this.isShuffling ? this.shuffleList.forEach(function(t) {
            t.id == s.id && i(t);
        }) : i(s)) : this.isRepeating ? this.repeat(e) : this.isShuffling ? this.shuffle().next("shuffleIndex", e) : this.next("currentIndex", e), 
        this;
    }, t.prototype.applyPreviousAction = function(t) {
        return this.isRepeating && this.toggle("repeat", !1), this.isShuffling ? this.shuffle().previous("shuffleIndex", t) : this.previous("currentIndex", t), 
        this;
    }, t.prototype.toggle = function(t, e) {
        var i = "shuffle" === t ? "isShuffling" : "repeat" === t ? "isRepeating" : "", t = "shuffle" === t ? "isRepeating" : "repeat" === t ? "isShuffling" : "";
        return this[i] = void 0 !== e ? e : !this[i], void 0 === e && (this[t] = !1), 
        "shuffle" == i && (this.shuffleIndex = 0), this;
    }, t.prototype.flush = function(t) {
        return t && (this.isReloading = !0, this.clearWaiters()), this.options.video && this.isUsingHLSPolyfill && this.hls && this.destoryHLS(), 
        this.bufferProgress = this.lastBufferProgress = this.progress = this.position = this.remainingTime = this.duration = 0, 
        this.error = this.metadata = this.playState = void 0, this.currentMediaItem = {}, 
        this.isUsingHLSPolyfill || this.setAttribute("src", this.emptyWaveFileBase64), 
        this.setPosition(0), this;
    }, t.prototype.clearWaiters = function() {
        return w.clearTimeout(this.errorTimeout), this.errorTimeout = void 0, this.windows || this.playstation ? (w.clearInterval(this.interval), 
        this.interval = void 0) : this.onlinecbreload = !1, this;
    }, t.prototype.setOptions = function(t) {
        if (t) {
            var e = void 0;
            for (e in t) this.options[e] = t[e], "volume" === e ? this.setVolume(t[e]) : "controls" === e ? this.audioElement.controls = t[e] : "poster" === e && this.setAttribute("poster", t[e]);
        }
        return this;
    }, t.prototype.createMedia = function() {
        var t = this;
        return this.options.vr ? (this.hasCustomScript = d.getElementById("gl-vr"), 
        this.hasCustomScript ? this.createVRElement() : (this.script = d.createElement(s), 
        this.script.src = "https://storage.googleapis.com/vrview/2.0/build/vrview.min.js", 
        this.script.id = "gl-vr", this.script.async = !1, d.head.appendChild(this.script), 
        this.script.onload = function() {
            t.createVRElement(), delete t.script;
        }), delete this.hasCustomScript) : this.options.html5 ? (this.audioElement = new Audio(), 
        this.updateDomElement()) : this.options.hls ? (this.hasCustomScript = d.getElementById("gl-hls"), 
        this.hasCustomScript ? this.createElement() : (this.script = d.createElement(s), 
        this.script.src = "https://anghamiwebcdn.akamaized.net/web/vendor/hls.min.js", 
        this.script.id = "gl-hls", this.script.async = !1, d.head.appendChild(this.script), 
        this.script.onload = function() {
            t.createElement(), delete t.script;
        }), delete this.hasCustomScript) : this.createElement(), this;
    }, t.prototype.createNewHlsContext = function() {
        this.hls = new w.Hls({
            autoStartLoad: !0,
            startPosition: -1,
            capLevelToPlayerSize: !0,
            debug: !1,
            defaultAudioCodec: void 0,
            initialLiveManifestSize: 1,
            maxBufferLength: 30,
            maxMaxBufferLength: 600,
            maxBufferSize: 6e7,
            maxBufferHole: .5,
            lowBufferWatchdogPeriod: .5,
            highBufferWatchdogPeriod: 3,
            nudgeOffset: .1,
            nudgeMaxRetry: 5,
            maxFragLookUpTolerance: .2,
            liveSyncDurationCount: 3,
            liveMaxLatencyDurationCount: 10,
            enableWorker: !0,
            enableSoftwareAES: !0,
            manifestLoadingTimeOut: 15e3,
            manifestLoadingMaxRetry: 4,
            manifestLoadingRetryDelay: 500,
            manifestLoadingMaxRetryTimeout: 64e3,
            startLevel: void 0,
            levelLoadingTimeOut: 1e4,
            levelLoadingMaxRetry: 4,
            levelLoadingRetryDelay: 500,
            levelLoadingMaxRetryTimeout: 64e3,
            fragLoadingTimeOut: 2e4,
            fragLoadingMaxRetry: 6,
            fragLoadingRetryDelay: 500,
            fragLoadingMaxRetryTimeout: 64e3,
            startFragPrefetch: !1,
            appendErrorMaxRetry: 3,
            enableWebVTT: !0,
            enableCEA708Captions: !0,
            stretchShortVideoTrack: !0,
            maxAudioFramesDrift: 1,
            forceKeyFrameOnDiscontinuity: !0,
            abrEwmaFastLive: 5,
            abrEwmaSlowLive: 9,
            abrEwmaFastVoD: 4,
            abrEwmaSlowVoD: 15,
            abrEwmaDefaultEstimate: 5e5,
            abrBandWidthFactor: .95,
            abrBandWidthUpFactor: .7,
            minAutoBitrate: 0
        }), this.hls.attachMedia(this.audioElement), this.appendHLSEvents();
    }, t.prototype.createVRElement = function() {
        new w.VRView.Player("#vrview", {
            video: this.options.vrSrc
        }).play();
    }, t.prototype.createElement = function() {
        var t;
        try {
            this.options.video ? (t = d.getElementById(v), this.audioElement = t.appendChild(d.createElement(v)), 
            t = null, this.device.browser && this.options.hls && (this.isUsingHLSPolyfill = !0)) : this.audioElement = d.body.appendChild(d.createElement(a)), 
            this.updateDomElement();
        } catch (t) {}
    }, t.prototype.updateDomElement = function() {
        this.addEventListeners(), this.setAttribute("preload", "none"), this.options.video ? (this.audioElement.playsInline = !0, 
        this.audioElement.setAttribute("webkit-playsinline", "true"), this.audioElement.style.width = "100%", 
        this.audioElement.style.height = "100%", this.audioElement.style.display = "block", 
        this.audioElement.style.position = "absolute", this.audioElement.style.top = "0", 
        this.audioElement.style.left = "0", this.audioElement.style.right = "0", 
        this.audioElement.style.bottom = "0", this.audioElement.style.backgroundColor = "black", 
        this.setSrc(this.emptyVideoFileBase64).setAttribute("type", this.options.hls ? "application/x-mpegURL" : "video/mp4")) : this.setSrc(this.emptyWaveFileBase64).setAttribute("type", 'audio/mp4; codecs="mp4a.40.2"'), 
        "function" == typeof this.options.onInit && this.options.onInit();
    }, t.prototype.addEventListeners = function() {
        if (this.audioElement) {
            var t = void 0;
            for (t in this.audioElementEvents) this.audioElement.addEventListener(t, this.audioElementEvents[t], !1);
            this.options.video && this.isUsingHLSPolyfill && (this.hlsjsErrorHandler = this.hlsPolyfillVideoTagErrorHandlerFactory(), 
            this.hlsVideoTagErrorHandler = this.hlsPolyfillVideoTagErrorHandlerFactory());
        }
        return this;
    }, t.prototype.isValid = function() {
        return !!this.forceDurationChangeForAudioAd || null !== this.currentSrc.match(this.mimeRegx);
    }, t.prototype.isBufferValid = function() {
        return 0 < this.bufferProgress && this.bufferProgress !== this.lastBufferProgress;
    }, t.prototype.hasBuffer = function() {
        return !this.playstation && 100 !== this.bufferProgress;
    }, t.prototype.setSrc = function(t) {
        try {
            this.currentSrc = t;
        } catch (t) {}
        return this;
    }, t.prototype.setAttribute = function(t, e) {
        if (void 0 !== e) try {
            this.audioElement[t] = e;
        } catch (t) {}
        return this;
    }, t.prototype.removeAttribute = function(t) {
        try {
            this.audioElement.removeAttribute(t);
        } catch (t) {}
        return this;
    }, t.prototype.on = function(t, e) {
        this.eventMap[t] || (this.eventMap[t] = []), this.eventMap[t].push(e);
    }, t.prototype.off = function(t, e) {
        this.eventMap[t] = e;
    }, t.prototype.dispatchEvent = function(t, e) {
        t = this.eventMap[t];
        return t && t.forEach(function(t) {
            "function" == typeof t && t(e);
        }), this;
    }, t.prototype.destroy = function() {
        if (this.audioElement) for (var t in this.audioElementEvents) this.audioElement.removeEventListener(t, this.audioElementEvents[t], !1);
        for (t in this.eventMap) delete this.eventMap[t];
        return !this.options.html5 && this.audioElement && this.audioElement.parentNode.removeChild(this.audioElement), 
        this.options.video && this.isUsingHLSPolyfill && (this.destoryHLS(), this.options = {}, 
        this.isUsingHLSPolyfill = void 0, delete this.hlsjsErrorHandler, delete this.hlsVideoTagErrorHandler, 
        delete this.hls), delete this.eventMap, this.audioElement && delete this.audioElement, 
        this.eventMap = {}, this.audioElement = void 0, this;
    }, t.prototype.destoryHLS = function() {
        this.hls && (this.hls.destroy(), this.hls.detachMedia());
    }, t.prototype.hlsPolyfillVideoTagErrorHandlerFactory = function() {
        var e = this, i = null, s = null;
        return function() {
            var t = Date.now();
            !i || 2e3 < t - i ? (i = t, e.hls.recoverMediaError()) : !s || 2e3 < t - s ? (s = t, 
            e.hls.swapAudioCodec(), e.hls.recoverMediaError()) : e.destoryHLS();
        };
    }, t.prototype.checkError = function(t) {
        this.isValid() && this.catchErrorVulnerability(t);
    }, t.prototype.showLoading = function() {
        this.audioTrackPlaying = void 0, this.dispatchEvent("wait", {
            status: this.audioTrackPlaying
        });
    }, t.prototype.catchErrorVulnerability = function(t) {
        var e, i, s, o, n = this;
        100 !== this.bufferProgress && (e = t.target.readyState, i = t.target.networkState, 
        e = 2 <= e && this.metadata, i = 2 === i, s = (t = t.target.error) && t.code ? t.code : void 0, 
        o = function(t) {
            n.showLoading(), n.error = !0, n.reload(t);
        }, this.online = this.windows || this.playstation ? this.isOnline() : this.online, 
        this.online ? t && 4 === s ? (this.showLoading(), this.dispatchEvent("error", {
            progress: this.progress
        })) : t && 1 < s || 0 < this.bufferProgress && !i && !e || this.playstation && this.playState ? o(this.options.reloadOnError) : (0 === this.bufferProgress || this.playstation && !this.playState) && (i && !e ? o(this.options.reloadOnInit + 1e4) : (!i && !e || e && !i) && o(this.options.reloadOnInit)) : (n.showLoading(), 
        n.error = !0, n.waitUntilOnline()));
    }, t;
}();

"object" == typeof module && module && "object" == typeof module.exports ? module.exports = Galactic : "function" == typeof define && define.amd ? define(function() {
    return {
        constructor: Galactic,
        instance: Galactic
    };
}) : w.Galactic = Galactic;
//# sourceMappingURL=Galactic.min.js.map